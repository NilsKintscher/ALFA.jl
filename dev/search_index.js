var documenterSearchIndex = {"docs":
[{"location":"examples/example_01/#Example-1:-Tutorial-1","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"This example should serve as a tutorial of the aLFA framework. We analyze several components of a two-grid method to solve the linear system of equations Ax=b, where A corresponds to the two-dimensional Laplacian discretized on an equidistant rectangular lattice.","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"This example is structured as follows.","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"We define the underyling linear operator: The second order approximation of the two-dimensional Laplacian L obtained via finite central differences (5-point stencil). We further compute its spectrum.\nWe show the connection of the operator L to the system matrix A.\nWe introduce and analyze the Jacobi-method.\nWe define the coarse grid correction.\nWe analyze the two-grid method using the Jacobi-method as a smoother.\nWe introduce the lexicographic Gauss-Seidel and red-black Gauss-Seidel smoother and analyze the corresponding two-grid method.\nWe use this framework to prototype an actual two-grid method.","category":"page"},{"location":"examples/example_01/#Importing-required-packages-1","page":"Example 1: Tutorial","title":"Importing required packages","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"using alfa\nusing LinearAlgebra\nusing Plots","category":"page"},{"location":"examples/example_01/#The-discretized-Laplacian-L-in-2D-1","page":"Example 1: Tutorial","title":"The discretized Laplacian L in 2D","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"We are going to define the 2D discretized Laplacian LmathcalL(mathbbL^s(mathcalA)) rightarrow mathcalL(mathbbL^s(mathcalA)) on an equidistant rectangular lattice. Thus, mathbbL^s(mathcalA) describes the underlying structure of the domain and codomain of the operator L.","category":"page"},{"location":"examples/example_01/#Definition-of-the-underlying-lattice-structure-1","page":"Example 1: Tutorial","title":"Definition of the underlying lattice structure","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"First, we need to define a basis of the underlying translational-invariance: an equidistant rectangular lattice is given by","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"mathcalA = frac1hleftbeginmatrix 1  0  0  1 endmatrixright = leftbeginmatrix mathcala_1  mathcala_2endmatrixright","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"The lattice generated by mathcalA is the set","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"mathbbL(mathcalA) = mathcalAmathbbZ^2 = x = alpha_1mathcala_1 + alpha_2mathcala_2    alpha_1alpha_2 in mathbbZ","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"The class alfa.Lattice corresponds to mathbbL(mathcalA) and is initialized with the matrix mathcalA.","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"h = .1  # define h\nA = h*[1 0; 0 1]  # 2x2 identity matrix scaled with h\n\n# initialize the lattice;\n#In the constructor we need to specify the size/dimensionality (N=2)\n# and the datatype of the lattice basis (T=Float64)\n#  (the alternative to Float is Rational{BigInt})\nLA = alfa.Lattice{2,Float64}(A)  \n","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"We can plot a section of the lattice. Black arrows correspond to the primitive vectors a_1 and a_2","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"plot(LA)","category":"page"},{"location":"examples/example_01/#Definition-of-the-domain-and-codomain-of-the-operator-L-1","page":"Example 1: Tutorial","title":"Definition of the domain and codomain of the operator L","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"The structure element s of mathbbL^s(mathcalA) corresponds of the location of the unknowns. We can simply choose s=(s_1), where s_1=(00), such that the crystal points coincide with the lattice structure.","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"The struct alfa.Crystal is used to represent both crystals corresponding to the domain and codomain of an operator. We initialize it with alfa.Crystal{N,T}(LA,s_domain, s_codomain), where sdomain corresponds to the structure element of the domain, and scodomain corresponds to the structure element of the codomain. (In our case we have sdomain = scodomain = s):","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"Domain = [[0,0]]\nCodomain = [[0,0]]\nCA = alfa.Crystal{2,Float64}(LA,Domain,Codomain)","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"We can have a plot function to plot a section of a crystal:","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"plot(CA)","category":"page"},{"location":"examples/example_01/#Initializing-the-operator-L-1","page":"Example 1: Tutorial","title":"Initializing the operator L","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"As we have defined the underlying domain and codomain of our operator, we can initialize the multiplication operator L.","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"This class represents a multiplication operator corresponding to","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"(Lf)(x) = sum_y in mathbbZ^textd   m_L^y cdot f(x+mathcalAy)","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"for all x in mathbbL(mathcalA), where d=2 is the dimensionality. Note, that the position of the operator is given in fractional coordinates, not in cartesian coordinates mathcalAy, such that y is always integral.","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"L = alfa.CrystalOperator{2,Float64}(CA)","category":"page"},{"location":"examples/example_01/#Adding-the-multipliers-of-L-1","page":"Example 1: Tutorial","title":"Adding the multipliers of L","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"We use push!(L,m) to add multipliers m_L^y to the operator in order to define the discretized Laplacian. As the structure elements of the domain and codomain are both 1-dimensional, the matrices m_L^{y} are of size 1times 1.","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"The multipliers are then saved within a SortedSet L.m which is lexicographically ordered with respect to the position y.","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"push!(L, alfa.Multiplier([0 0], [-4/h^2]))\npush!(L, alfa.Multiplier([0 -1], [1/h^2]))\npush!(L, alfa.Multiplier([0 1], [1/h^2]))\npush!(L, alfa.Multiplier([1 0], [1/h^2]))\npush!(L, alfa.Multiplier([-1 0], [1/h^2]))\n\n@show L","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"A schematic representation can be created with the plot command.","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"plot(L)","category":"page"},{"location":"examples/example_01/#Computing-the-spectrum-of-L-1","page":"Example 1: Tutorial","title":"Computing the spectrum of L","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"The spectrum of a CrystalOperator is computed via the alfasymbol(LCrystalOperatorkVector) method, where k is the frequency/wavevector.","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"alfa.symbol(L,[0, 0])","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"In order to compute or approximate the \"complete\" spectrum, we divide 01)^textd into N^d equidistant points to get a discretization of the primitive cell of the dual lattice mathcalA^-T01)^textd. Next, we compute the eigenvalues for each symbol(L,k), where k is sampled on these N^d points.","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"alfa.eigvals(L,N=10)","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"We may also save everything in a dataframe via alfa.eigvals_df(L,N=N) or directly produce a plot of the absolut part of the spectrum as follows","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"surfacespectrum(L,N=20)","category":"page"},{"location":"examples/example_01/#Obtaining-a-system-matrix-A-from-a-multiplication-operator-L-1","page":"Example 1: Tutorial","title":"Obtaining a system matrix A from a multiplication operator L","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"We can obtain the system matrix A corresponding to the a discretization of the Laplacian on the unit square [0,1]^2 with periodic boundary conditions in two steps.","category":"page"},{"location":"examples/example_01/#Step-1-1","page":"Example 1: Tutorial","title":"Step 1","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"We rewrite L with respect to the sublattice mathbbL(mathcalZ) subset mathbbL(mathcalA) with mathcalZ=left(beginmatrix 1  0  0  1 endmatrixright).","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"Due to the fact that we find 1h^2 = 100 lattice points in Z01)^2 cap mathbbL(mathcalA) = tildes, we obtain an operator","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"tildeAmathcalL(mathbbL^tildes(mathcalZ)) rightarrow mathcalL(mathbbL^tildes(mathcalA)) text with  (tildeA g)(x) =  sum_y in mathbbZ^textd   m_tildeA^y cdot g(x+mathcalZy) quad m_tildeA in mathbbC^100times 100","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"using SparseArrays\ntA = alfa.wrtLattice(L,alfa.Lattice{2,Float64}([1 0; 0 1]))\ntA = alfa.normalize(tA); # make sure all points of the structure elements are within [0,1)^2 and lexicographically ordered.\nnothing # hide","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"We create a spy plot of all five multipliers of tA. One multiplier corresponds to the interaction of the unknowns within the unit cell. The other four multipliers correspond to the connections beyond the boundaries:","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"using SparseArrays\nparr = []\nfor x in tA.M\n    p = spy(SparseMatrixCSC(x.mat), c=:blues, title=\"position: \" * string(x.pos))\n    push!(parr, p)\nend\nplot(parr...);","category":"page"},{"location":"examples/example_01/#Step-two-1","page":"Example 1: Tutorial","title":"Step two","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"As we impose periodic boundary conditions on the unit square, all lattice points of mathbbL(Z) are identified. Thus, we obtain the system matrix A by adding all multipliers of tA.","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"tAm = sum(x.mat for x in tA.M);\nspy(SparseMatrixCSC(tAm), c=:blues);","category":"page"},{"location":"examples/example_01/#A-link-between-the-the-eigenvalues-of-A-and-L_k-1","page":"Example 1: Tutorial","title":"A link between the the eigenvalues of A and L_k","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"We can compute the eigenvalues and eigenvectors of A and compare them with the eigenvalues computed via LFA:","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"eig1 = abs.(sort(eigvals(tAm), by=abs))\neig2 = abs.(alfa.eigvals(L,N=10, by=abs))\n\np = plot(eig1, label=\"eigenvalues of the system matrix\")\nplot!(eig2, label=\"eigenvalues computed via the symbol\")\nplot!(abs.(eig1.-eig2), label=\"pairwise difference of the eigenvalues.\")\n","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"The eigenvalues are equal as long as N=1/h, where h corresponds to the lattice spacing and N corresponds to the discretization of the frequency space.","category":"page"},{"location":"examples/example_01/#Analysis-of-stationary-iterative-methods-1","page":"Example 1: Tutorial","title":"Analysis of stationary iterative methods","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"Given a linear system of equations (LSE) Ax=b, the Jacobi method produces iterates via","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"x_k+1 leftarrow (I-S^-1A)x_k + S^-1b","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"where I is the identity and S is simply the diagonal of A.","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"Denote with x^* = A^-1b the solution of the LSE and with e_k = x^* - x_k the kth error. Since","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"e_k+1 = (I-S^-1A)e_k","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"the operator G=(I-S^-1A) is called error propagator. We are interested in the spectral radius rho(G)=maxlambda      lambda text Eigenvalue of G   of the error propagator, as we have","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"e_k+1 approx rho(G) e_k","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"for large k (if the initial error has a component in the direction of the eigenvector corresponding to the largest absolute eigenvalue).","category":"page"},{"location":"examples/example_01/#The-Jacobi-method-1","page":"Example 1: Tutorial","title":"The Jacobi method","text":"","category":"section"},{"location":"examples/example_01/#Definition-of-the-Jacobi-method-1","page":"Example 1: Tutorial","title":"Definition of the Jacobi-method","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"We compute the spectrum via LFA, thus we need to define I and S as multiplication operators. In case of the Jacobi method, the multipliers of","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"SmathcalL(mathbbL^s(mathcalA)) rightarrow mathcalL(mathbbL^s(mathcalA)) quadquad quad (Sf)(x) = sum_y in mathbbZ^textd   m_S^y cdot f(x+mathcalAy)","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"are given by","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"m_S^y = begincases m_L^y   text if  y = 0  0  text else endcases","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"S_jac = alfa.CrystalOperatorCopyWithMultipliers(L)\n\nplot(S_jac)","category":"page"},{"location":"examples/example_01/#Analysis-of-the-Jacobi-method-1","page":"Example 1: Tutorial","title":"Analysis of the Jacobi-method","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"We analyze the error propagator of the Jacobi method using underrelaxation of .8.","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"f_jac =:(I-0.8*inv($S_jac)*$L) # construct an expression holding the CrystalOperators S and L.\noc = alfa.OperatorComposition(f_jac)\n\nsurfacespectrum(oc, 40) # plot the absolute part of the spectrum using 40^2 points.","category":"page"},{"location":"examples/example_01/#Definition-of-the-two-grid-error-propagator-1","page":"Example 1: Tutorial","title":"Definition of the two-grid error propagator","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"We are going to analyze the two-grid method corresponding to the error propagator KG_1 = (I-P L_c^-1 RL)cdot G_1 with R=P^T, L_c = RLP. Thus, we only have to define the prolongation operator P explicitly. This operator maps from a coarse crystal to the fine crystal mathbbL^s(mathcalA).","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"We use the following coarse grid: mathbbL^t(2mathcalA), t=(00):","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"plot(alfa.Lattice{2,Float64}(2*L.C.A))","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"The so-called 'full weighting' prolongation operator P has a translational invariance of 2mathcalA. Thus we can define it within this framework as P  mathcalL(mathbbL^t(2mathcalA)) rightarrow mathcalL(mathbbL^hats(2mathcalA))","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"where the codomain mathbbL^hats(2mathcalA) is a representation of the fine crystal mathbbL^s(mathcalA), but with respect to the larger translational invariance. This is the case if the structure element consists of all lattice points mathbbL(mathcalA) found in the primitive cell 2mathcalA01)^2:  hats = mathbbL^s(mathcalA) cap 2mathcalA01)^2 =  ( s s + mathcala_1 s + mathcala_2 s + mathcala_1 + mathcala_2) = ( 0  mathcala_1  mathcala_2  mathcala_1 + mathcala_2)","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"p_domain = [[0, 0]]  # corresponds to \"t\" in the above description\n# corresponds to \\hat{s} in the above description\np_codomain = [A*[0, 0], A*[0, 1], A*[1, 0], A*[1, 1]]\n\n\nCcoarse = alfa.Crystal{2,Float64}(2*L.C.A, p_domain, p_codomain)\n\n# a plot of the domain and codomain.\nplot(Ccoarse)","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"We initialize and define the prolongation operator P. This operator maps a value of each coarse grid point to its 9 nearest fine-grid points:","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"P = alfa.CrystalOperator{2,Float64}(Ccoarse)\npush!(P, alfa.Multiplier([0,0], [1; 1/2; 1/2; 1/4]))\npush!(P, alfa.Multiplier([1,0], [0;   0; 1/2; 1/4]))\npush!(P, alfa.Multiplier([0,1], [0; 1/2;   0; 1/4]))\npush!(P, alfa.Multiplier([1,1], [0;   0;   0; 1/4]))\n\nplot(P)","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"We can compute the restriction operator R=P^T and the coarse grid operator L_c = RLP.","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"R = transpose(P)\nLc = R*L*P\nplot(plot(R), plot(Lc))","category":"page"},{"location":"examples/example_01/#Two-grid-analysis-with-Jacobi-smoothing:-1","page":"Example 1: Tutorial","title":"Two-grid analysis with Jacobi smoothing:","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"As all operators share the translational invariance of mathbbL(2mathcalA) each operator can be rewritten with respect to this translational invariance. Alltogether, the error propagator is a mapping","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"KG_1  mathcalL(mathbbL^hats(2mathcalA)) rightarrow mathcalL(mathbbL^hats(2mathcalA))","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"As the structure element is of size 4 ( hats = ( 0  mathcala_1  mathcala_2  mathcala_1 + mathcala_2)), its symbol (KG_1)_k is of size 4times 4 and we obtain 4 eigenvalues per wavevector k.","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"f_cgc = :(I-$P*inv($Lc)*$R*$L)\nf_tgj = f_cgc*f_jac\noc_tgj = alfa.OperatorComposition(f_tgj)\nalfa.symbol(oc_tgj, [0,0])","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"A plot of the absolute part of the spectrum:","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"surfacespectrum(oc_tgj, N=20, zfilter=(0,0.7))","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"Note, that the zfilter filters the eigenvalue corresponding to the constant eigenfunction  (k=(00)) which is in the kernel of L.","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"The spectral radius of the two-grid error propagator is 6 when we use underrelaxation of omega = 8 in the Jacobi-method. Thus, the norm of an error is reduced by 40 in each iteration of the two-grid method.","category":"page"},{"location":"examples/example_01/#Lexicographic-Gauss-Seidel-smoothing-1","page":"Example 1: Tutorial","title":"Lexicographic Gauss-Seidel smoothing","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"Given a linear system of equations (LSE) Ax=b, the Gauss-Seidel method produces iterates via","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"x_k+1 leftarrow (I-S^-1A)x_k + S^-1b","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"where I is the identity and S is simply the triangle of A. We assume that the unknowns x_1x_2ldotsx_1h^2 are ordered lexicographically, i.e.,","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"x_i=(x_i_1 x_i_2)  x_j=(x_j_1 x_j_2) text iff  left(x_i_1  x_j_1) text or  (x_i_1 = x_j_1 text and x_i_2  x_j_2)right","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"In the lower triangle of A we find the connections of each unknown x_i, which is not part of the boundary, to the unknowns x_j with x_i leq x_j. Thus, we can express this operator for all unknowns that do not lie at the boundary. We have  SmathcalL(mathbbL^s(mathcalA)) rightarrow mathcalL(mathbbL^s(mathcalA))","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"(Sf)(x) = sum_y in mathbbZ^textd m_S^y cdot f(x+mathcalAy) quad text for all  x text which do not lie nearat the boundary","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"with nonzero multipliers","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"m_S^y = begincases m_L^y   text if  y leq 0  0  text else endcases","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"where y leq 0 refers to the lexicographic ordering.","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"S = alfa.CrystalOperatorCopyLowerTriangle(L)\n\nplot(S)","category":"page"},{"location":"examples/example_01/#Two-grid-analysis-with-lexicographic-Gauss-Seidel-smoothing:-1","page":"Example 1: Tutorial","title":"Two-grid analysis with lexicographic Gauss-Seidel smoothing:","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"f_gs = :(I-$inv($S)*$L)\nf_tggs = f_cgc*f_gs\noc_tggs = alfa.OperatorComposition(f_tggs)\nsurfacespectrum(oc_tggs, N=40, zfilter=(0,0.7))","category":"page"},{"location":"examples/example_01/#A-colored-smoother:-red-black-Gauss-Seidel-1","page":"Example 1: Tutorial","title":"A colored smoother: red-black Gauss-Seidel","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"Instead of lexicographic Gauss-Seidel, we can update unknowns using a different ordering. Consider the following red-black coloring of the underlying structure:","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"(Image: title)","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"Red-black Gauss-Seidel corresponds to the method which updates red unknowns before it updates black unknowns. This can be described with an error propagator of the form G_b cdot G_r where G_x=(I - R_x^T (R_x A R_x^T)^-1R_x A), where R_x, x=rb, is the canonical restriction to the red/black unknowns.","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"First, we describe the red-black crystal: We have","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"mathbbL^u(C) C = left(beginmatrix mathcala_1 + mathcala_2  mathcala_1 - mathcala_2 endmatrixright) = mathcalAleft(beginmatrix 1  1  1  -1endmatrixright)","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"with u=(0mathcala_1)=(u_textred  u_textblack).","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"C = A*[1 1; 1 -1]\nu = [A*[0,0], A*[1,0]]\nu_red = [u[1]]\nu_black = [u[2]]\nCr = alfa.Crystal{2,Float64}(C, u, u_red)\nCb = alfa.Crystal{2,Float64}(C, u, u_black)\n\np1 = plot(Cr)\np2 = plot(Cb)\nplot(p1, p2)","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"Definition of the restriction operators:","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"\nRr = alfa.CrystalOperator{2,Float64}(Cr)\npush!(Rr, alfa.Multiplier([0 0], [1 0]))\nRb = alfa.CrystalOperator{2,Float64}(Cb)\npush!(Rb, alfa.Multiplier([0 0], [0 1]))\n\np1 = plot(Rr)\np2 = plot(Rb)\nplot(p1, p2)","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"Defintion of the smoother:","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"\nSr = Rr*L*Rr'\nSb = Rb*L*Rb'\n\np1 = plot(Sr)\np2 = plot(Sb)\nplot(p1, p2)","category":"page"},{"location":"examples/example_01/#Twogrid-analysis-with-red-black-smoothing-1","page":"Example 1: Tutorial","title":"Twogrid analysis with red-black smoothing","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"fr = :(I-$Rr'*$inv($Sr)*$Rr*$L)\nfb = :(I-$Rb'*$inv($Sb)*$Rb*$L)\nf_tgrb = f_cgc*fb*fr\noc_tgrb = alfa.OperatorComposition(f_tgrb)\nsurfacespectrum(oc_tgrb, N=40, zfilter=(0,0.7))","category":"page"},{"location":"examples/example_01/#Alternative-construction-and-analysis-of-red-black-1","page":"Example 1: Tutorial","title":"Alternative construction and analysis of red-black","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"A simpler construction can be done as follows. Note, that we (have to) use the pseudoinverse instead of the inverse as the constructed operators Sr and Sb are singular:","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"Lrb = alfa.wrtLattice(L, L.C.L.A*[1 1; 1 -1])\nSr = alfa.CrystalOperatorCopyWithMultipliers(Lrb, idx=[1])\nSb = alfa.CrystalOperatorCopyWithMultipliers(Lrb, idx=[2])\nfr = :(I-pinv($Sr)*$L)\nfb = :(I-pinv($Sb)*$L)\nf_tgrb = f_cgc*fb*fr\noc_tgrb = alfa.OperatorComposition(f_tgrb)\nsurfacespectrum(oc_tgrb, N=40, zfilter=(0,0.7))","category":"page"},{"location":"examples/example_01/#Prototyping-a-two-grid-method-1","page":"Example 1: Tutorial","title":"Prototyping a two-grid method","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"By rewriting all operators with respect to a shared large translationally invariance mathcalZ analogously to \"Obtaining a system matrix A from a multiplication operator L\", we can prototype a two-grid method as follows. We stick to the Jacobi example.","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"wrtL = alfa.Lattice{2,Float64}([1 0; 0 1])\nLm = SparseMatrixCSC(alfa.construct_matrix(L,wrtL))\nRm = SparseMatrixCSC(alfa.construct_matrix(R,wrtL))\nPm = SparseMatrixCSC(alfa.construct_matrix(P,wrtL))\nSm = SparseMatrixCSC(alfa.construct_matrix(S_jac,wrtL))\nLcm = SparseMatrixCSC(alfa.construct_matrix(Lc,wrtL))\n\nnothing # hide","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"We create a spy plot of all matrices:","category":"page"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"pLm = spy(Lm, c=:blues, title=\"Lm\");\npRm = spy(Rm, c=:blues, title=\"Rm\");\npPm = spy(Pm, c=:blues, title=\"Pm\");\npSm = spy(Sm, c=:blues, title=\"Sm\");\npLcm = spy(Lcm, c=:blues, title=\"Lcm\");\nplot(pLm, pRm, pPm, pSm, pLcm);","category":"page"},{"location":"examples/example_01/#Definition-of-the-application-of-the-smoother-and-coarse-grid-correction-1","page":"Example 1: Tutorial","title":"Definition of the application of the smoother and coarse grid correction","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"SmLU = lu(Sm)\nLcmLU = lu(Lcm)\n\nfunction smooth(b, x)\n    r = b-Lm*x\n    x += 0.8*(SmLU\\r)\n    return x\nend\n\nfunction cgc(b, x)\n    r = b-Lm*x\n    rc = Rm*r\n    xc = LcmLU\\rc\n    x += Pm*xc\n    return x\nend\nnothing # hide","category":"page"},{"location":"examples/example_01/#Testrun-of-the-twogrid-method.-1","page":"Example 1: Tutorial","title":"Testrun of  the twogrid method.","text":"","category":"section"},{"location":"examples/example_01/#","page":"Example 1: Tutorial","title":"Example 1: Tutorial","text":"\n# initialize rhs and initial guess\nglobal x, b, casym_vec, resnorm_vec, num_iter\nn = size(Lm,1);\nx = zeros(n);\nb = Lm*rand(n);\nb = b/norm(b);\n\ncasym_vec = [1.0]\nresnorm_vec = [1.0]\n\nnum_iter = 0\n\nwhile resnorm_vec[end] > 1e-13 && num_iter < 150\n    global x, b, casym_vec, resnorm_vec, num_iter\n    num_iter = num_iter + 1\n    x = smooth(b,x)\n    x = cgc(b,x)\n    push!(resnorm_vec, norm(b - Lm*x))\n    push!(casym_vec, resnorm_vec[end]/resnorm_vec[end-1])\nend\n\n# plot convergence behavior.\nplot(resnorm_vec, yaxis=:log, xlabel=\"iteration\", ylabel=\"residual norm\", title=\"measured asymptotic convrate=\"*string(casym_vec[end])*\"\\n conv.rate from analysis: \"*string(abs(alfa.eigvals(oc_tgj,N=20)[end-1])) )\n","category":"page"},{"location":"internals/internals/#Internals-1","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"internals/internals/#","page":"Internals","title":"Internals","text":"Pages = [\"internals.md\"]","category":"page"},{"location":"internals/internals/#","page":"Internals","title":"Internals","text":"Modules = [alfa]","category":"page"},{"location":"internals/gallery/#Gallery-1","page":"Gallery","title":"Gallery","text":"","category":"section"},{"location":"internals/gallery/#","page":"Gallery","title":"Gallery","text":"Pages = [\"gallery.md\"]","category":"page"},{"location":"internals/gallery/#","page":"Gallery","title":"Gallery","text":"Modules = [alfa.gallery]","category":"page"},{"location":"examples/example_03/#Example-3:-Half-hybrid-smoother-for-the-curl-curl-equation-1","page":"Example 3: Half-hybrid smoother for the curl-curl equation","title":"Example 3: Half-hybrid smoother for the curl-curl equation","text":"","category":"section"},{"location":"examples/example_03/#","page":"Example 3: Half-hybrid smoother for the curl-curl equation","title":"Example 3: Half-hybrid smoother for the curl-curl equation","text":"In here we use this framework to analyze the half hybrid smoother for the curl-curl equation as described in [2] https://epubs.siam.org/doi/abs/10.1137/S0036142997326203, and analyzed in [3] https://epubs.siam.org/doi/abs/10.1137/070679119.","category":"page"},{"location":"examples/example_03/#","page":"Example 3: Half-hybrid smoother for the curl-curl equation","title":"Example 3: Half-hybrid smoother for the curl-curl equation","text":"It corresponds to section 6.2 of [1] Kahl, K., Kintscher, N. Automated local Fourier analysis (aLFA). Bit Numer Math (2020). https://doi.org/10.1007/s10543-019-00797-w.","category":"page"},{"location":"examples/example_03/#Definition-of-the-operators-1","page":"Example 3: Half-hybrid smoother for the curl-curl equation","title":"Definition of the operators","text":"","category":"section"},{"location":"examples/example_03/#","page":"Example 3: Half-hybrid smoother for the curl-curl equation","title":"Example 3: Half-hybrid smoother for the curl-curl equation","text":"using alfa\nusing LinearAlgebra\nusing Plots\nusing SparseArrays","category":"page"},{"location":"examples/example_03/#System-and-restriction-operator-1","page":"Example 3: Half-hybrid smoother for the curl-curl equation","title":"System & restriction operator","text":"","category":"section"},{"location":"examples/example_03/#","page":"Example 3: Half-hybrid smoother for the curl-curl equation","title":"Example 3: Half-hybrid smoother for the curl-curl equation","text":"L = alfa.gallery.curlcurl(.01)\np1 = plot(L, title=\"L\")\n\nR = alfa.gallery.curlcurl_restriction()\np2 = plot(R, title=\"R\")\n\nP = R'\nLc = R*L*P\n\n(w,h) = p1.attr[:size]\nplot(p1, p2, layout=(2,1), size=(w,2h))\n","category":"page"},{"location":"examples/example_03/#Hybrid-smoother-1","page":"Example 3: Half-hybrid smoother for the curl-curl equation","title":"Hybrid smoother","text":"","category":"section"},{"location":"examples/example_03/#The-Discrete-gradient-operator-1","page":"Example 3: Half-hybrid smoother for the curl-curl equation","title":"The Discrete gradient operator","text":"","category":"section"},{"location":"examples/example_03/#","page":"Example 3: Half-hybrid smoother for the curl-curl equation","title":"Example 3: Half-hybrid smoother for the curl-curl equation","text":"A = [1 0; 0 1]\nDomain = [[.5, 0],[0, .5]]\nCodomain = [[0,0]]\n\nC = alfa.Crystal{2,Float64}(A, Domain, Codomain)\nRs = alfa.CrystalOperator{2,Float64}(C)\n\npush!(Rs, alfa.Multiplier([0 0], [-1 -1]))\npush!(Rs, alfa.Multiplier([-1 0], [1 0]))\npush!(Rs, alfa.Multiplier([0 -1], [0 1]))\n\nPs = Rs'\nLs = Rs*L*Ps\n\np1 = plot(Rs, title=\"Rs\")\np2 = plot(Ps, title=\"Ps\")\np3 = plot(Ls, title=\"Ls\")\nplot(p1, p2, p3, layout=(3,1), size=(w,3h))\n","category":"page"},{"location":"examples/example_03/#Gauss-Seidel-on-vertices-1","page":"Example 3: Half-hybrid smoother for the curl-curl equation","title":"Gauss-Seidel on vertices","text":"","category":"section"},{"location":"examples/example_03/#","page":"Example 3: Half-hybrid smoother for the curl-curl equation","title":"Example 3: Half-hybrid smoother for the curl-curl equation","text":"\n# We have to change to lexicographic ordering in order to obtain the same operator as described in [3]\nS1 = alfa.CrystalOperatorCopyLowerTriangle(Ls,perm=[2,1])\nplot(S1)","category":"page"},{"location":"examples/example_03/#scalar-Gauss-Seidel-on-edges-1","page":"Example 3: Half-hybrid smoother for the curl-curl equation","title":"scalar Gauss-Seidel on edges","text":"","category":"section"},{"location":"examples/example_03/#","page":"Example 3: Half-hybrid smoother for the curl-curl equation","title":"Example 3: Half-hybrid smoother for the curl-curl equation","text":"# change the structure element in order to obtain the same operator as described in [3]\ns0_lex = [[.5,0],[1,-.5]]\nL_lex = alfa.ChangeStructureElement(L, s0_lex, s0_lex)\nS0 = alfa.CrystalOperatorCopyLowerTriangle(L_lex, perm=[2,1])\n\n#Now, S0 describes a block-Gauss-Seidel smoother. We need to use the lower triangle of the central multiplier.\nm = alfa.find_multiplier(S0, [0,0])\nm.mat = tril(m.mat)\n\nplot(S0)","category":"page"},{"location":"examples/example_03/#Spectrum-of-the-smoother-1","page":"Example 3: Half-hybrid smoother for the curl-curl equation","title":"Spectrum of the smoother","text":"","category":"section"},{"location":"examples/example_03/#","page":"Example 3: Half-hybrid smoother for the curl-curl equation","title":"Example 3: Half-hybrid smoother for the curl-curl equation","text":"f_edge = :(I-pinv($S0)*$L)\nf_node = :(I-$Ps*pinv($S1)*$Rs*$L)\n\noc_s = alfa.OperatorComposition(f_edge*f_node)\nsurfacespectrum(oc_s, N=30)","category":"page"},{"location":"examples/example_03/#Spectrum-of-the-twogrid-method-1","page":"Example 3: Half-hybrid smoother for the curl-curl equation","title":"Spectrum of the twogrid method","text":"","category":"section"},{"location":"examples/example_03/#","page":"Example 3: Half-hybrid smoother for the curl-curl equation","title":"Example 3: Half-hybrid smoother for the curl-curl equation","text":"f_cgc = :(I-$P*inv($Lc)*$R*$L)\n\noc_tg = alfa.OperatorComposition(f_node*f_edge*f_cgc*f_node*f_edge)\nsurfacespectrum(oc_tg, N=30)","category":"page"},{"location":"examples/example_03/#Double-check-result-with-a-twogrid-implementation-1","page":"Example 3: Half-hybrid smoother for the curl-curl equation","title":"Double check result with a twogrid implementation","text":"","category":"section"},{"location":"examples/example_03/#","page":"Example 3: Half-hybrid smoother for the curl-curl equation","title":"Example 3: Half-hybrid smoother for the curl-curl equation","text":"wrtL = alfa.Lattice{2,Float64}(30*[1.0 0; 0 1.0])\nLm = SparseMatrixCSC{Float64,Int}(alfa.construct_matrix(L,wrtL))\nRm = SparseMatrixCSC{Float64,Int}(alfa.construct_matrix(R,wrtL))\nPm = SparseMatrixCSC{Float64,Int}(alfa.construct_matrix(P,wrtL))\nLcm = SparseMatrixCSC{Float64,Int}(alfa.construct_matrix(Lc,wrtL))\nS0m = SparseMatrixCSC{Float64,Int}(alfa.construct_matrix(S0,wrtL))\nS1m = SparseMatrixCSC{Float64,Int}(alfa.construct_matrix(S1,wrtL))\nRsm = SparseMatrixCSC{Float64,Int}(alfa.construct_matrix(Rs,wrtL))\nPsm = SparseMatrixCSC{Float64,Int}(alfa.construct_matrix(Ps,wrtL))\n\nnothing # hide","category":"page"},{"location":"examples/example_03/#Definition-of-the-application-of-the-smoother-and-coarse-grid-correction-1","page":"Example 3: Half-hybrid smoother for the curl-curl equation","title":"Definition of the application of the smoother and coarse grid correction","text":"","category":"section"},{"location":"examples/example_03/#","page":"Example 3: Half-hybrid smoother for the curl-curl equation","title":"Example 3: Half-hybrid smoother for the curl-curl equation","text":"S0mLU = lu(S0m)\nS1mLU = lu(S1m)\nLcmLU = lu(Lcm)\n\n\nfunction smooth_edge(b, x)\n    r = b-Lm*x\n    x += (S0mLU\\r)\n    return x\nend\n\n\nfunction smooth_node(b, x)\n    r = b-Lm*x\n    rc = Rsm*r\n    xc = S1mLU\\rc\n    x += Psm*xc\n    return x\nend\n\nfunction cgc(b, x)\n    r = b-Lm*x\n    rc = Rm*r\n    xc = LcmLU\\rc\n    x += Pm*xc\n    return x\nend\nnothing # hide","category":"page"},{"location":"examples/example_03/#Testrun-of-the-twogrid-method.-1","page":"Example 3: Half-hybrid smoother for the curl-curl equation","title":"Testrun of  the twogrid method.","text":"","category":"section"},{"location":"examples/example_03/#","page":"Example 3: Half-hybrid smoother for the curl-curl equation","title":"Example 3: Half-hybrid smoother for the curl-curl equation","text":"\n# initialize rhs and initial guess\nglobal x, b, casym_vec, resnorm_vec, num_iter\nn = size(Lm,1);\nx = Lm*rand(n);\nx = x/norm(x)\nb = 0*Lm*rand(n);\n\ncasym_vec = [1.0]\nresnorm_vec = [1.0]\n\nnum_iter = 0\n\nwhile resnorm_vec[end] > 1e-200 && num_iter < 175\n    global x, b, casym_vec, resnorm_vec, num_iter\n    num_iter = num_iter + 1\n    x = smooth_edge(b,x)\n    x = smooth_node(b,x)\n    x = cgc(b,x)\n    x = smooth_edge(b,x)\n    x = smooth_node(b,x)\n    push!(resnorm_vec, norm(b - Lm*x))\n    push!(casym_vec, resnorm_vec[end]/resnorm_vec[end-1])\nend\n\n# plot convergence behavior.\nplot(resnorm_vec, yaxis=:log, xlabel=\"iteration\", ylabel=\"residual norm\", title=\"measured asymptotic convrate=\"*string(casym_vec[end])*\"\\n conv.rate from analysis: \"*string(abs(alfa.eigvals(oc_tg,N=30)[end])))\n","category":"page"},{"location":"examples/example_02/#Example-2:-Colored-overlapping-smoother-for-graphene-1","page":"Example 2: Colored overlapping smoother for graphene","title":"Example 2: Colored overlapping smoother for graphene","text":"","category":"section"},{"location":"examples/example_02/#","page":"Example 2: Colored overlapping smoother for graphene","title":"Example 2: Colored overlapping smoother for graphene","text":"In here we use the aLFA framework to analyze a 4 color overlap smoother for the tight-binding Hamiltonian of graphene.","category":"page"},{"location":"examples/example_02/#","page":"Example 2: Colored overlapping smoother for graphene","title":"Example 2: Colored overlapping smoother for graphene","text":"It corresponds to section 6.1 of [1] Kahl, K., Kintscher, N. Automated local Fourier analysis (aLFA). Bit Numer Math (2020). https://doi.org/10.1007/s10543-019-00797-w.","category":"page"},{"location":"examples/example_02/#Definition-of-the-operators-1","page":"Example 2: Colored overlapping smoother for graphene","title":"Definition of the operators","text":"","category":"section"},{"location":"examples/example_02/#","page":"Example 2: Colored overlapping smoother for graphene","title":"Example 2: Colored overlapping smoother for graphene","text":"using alfa\nusing LinearAlgebra\nusing Plots","category":"page"},{"location":"examples/example_02/#System-operator-1","page":"Example 2: Colored overlapping smoother for graphene","title":"System operator","text":"","category":"section"},{"location":"examples/example_02/#","page":"Example 2: Colored overlapping smoother for graphene","title":"Example 2: Colored overlapping smoother for graphene","text":"L = alfa.gallery.graphene_tight_binding()\nplot(L)","category":"page"},{"location":"examples/example_02/#Restriction-operator-of-the-two-grid-method-1","page":"Example 2: Colored overlapping smoother for graphene","title":"Restriction operator of the two-grid method","text":"","category":"section"},{"location":"examples/example_02/#","page":"Example 2: Colored overlapping smoother for graphene","title":"Example 2: Colored overlapping smoother for graphene","text":"R = alfa.gallery.graphene_dirac_restriction(wl=.25, wlh=.25)\nplot(R)","category":"page"},{"location":"examples/example_02/#Prolongation-and-coarse-grid-operator-1","page":"Example 2: Colored overlapping smoother for graphene","title":"Prolongation and coarse grid operator","text":"","category":"section"},{"location":"examples/example_02/#","page":"Example 2: Colored overlapping smoother for graphene","title":"Example 2: Colored overlapping smoother for graphene","text":"P = R'\nLc = R*L*P\n\np1 = plot(P, title=\"P\",  aspect_ratio=:equal)\np2 = plot(Lc, title=\"Lc\",  aspect_ratio=:equal)\n(w,h) = p1.attr[:size]\nplot(p1, p2, layout=(2,1), size=(w,2h))","category":"page"},{"location":"examples/example_02/#Smoother-definition-1","page":"Example 2: Colored overlapping smoother for graphene","title":"Smoother definition","text":"","category":"section"},{"location":"examples/example_02/#","page":"Example 2: Colored overlapping smoother for graphene","title":"Example 2: Colored overlapping smoother for graphene","text":"We first rewrite the system operator L with respect to the translational invariance 2A, where A=LCLA","category":"page"},{"location":"examples/example_02/#","page":"Example 2: Colored overlapping smoother for graphene","title":"Example 2: Colored overlapping smoother for graphene","text":"slat = alfa.Lattice{2,Float64}(2*L.C.L.A)\nLs = alfa.wrtLattice(L,slat)\nplot(Ls)","category":"page"},{"location":"examples/example_02/#","page":"Example 2: Colored overlapping smoother for graphene","title":"Example 2: Colored overlapping smoother for graphene","text":"We now construct the 4 operators used in the four color smoother.","category":"page"},{"location":"examples/example_02/#","page":"Example 2: Colored overlapping smoother for graphene","title":"Example 2: Colored overlapping smoother for graphene","text":"idx=[2,3,4,5,6,7] #\nshifts = [[i,j] for i in [0,1] for j in [0,1]]\nS = []\np = []\nfor (it,x) in enumerate(shifts)\n   se = [y + L.C.L.A*x for y in Ls.C.Domain]\n   Ls_tmp = alfa.ChangeStructureElement(Ls, se, se)\n   push!(S, alfa.CrystalOperatorCopyWithMultipliers(Ls_tmp, idx=idx))\n   push!(p, plot(S[it], title=\"S[$it]\"))\nend\nplot(p..., layout=(2,2), size=(1.5w,1.5h))","category":"page"},{"location":"examples/example_02/#","page":"Example 2: Colored overlapping smoother for graphene","title":"Example 2: Colored overlapping smoother for graphene","text":"... and normalize the operators S for illustrative purposes:","category":"page"},{"location":"examples/example_02/#","page":"Example 2: Colored overlapping smoother for graphene","title":"Example 2: Colored overlapping smoother for graphene","text":"p = []\nfor (j,s) in enumerate(S)\n   S[j] = alfa.normalize(s)\n   push!(p, plot(S[j], title=\"S[$j]\"))\nend\nplot(p..., layout=(2,2), size=(1.5w,1.5h))","category":"page"},{"location":"examples/example_02/#Spectrum-of-the-error-propagator-of-the-Smoother-1","page":"Example 2: Colored overlapping smoother for graphene","title":"Spectrum of the error propagator of the Smoother","text":"","category":"section"},{"location":"examples/example_02/#","page":"Example 2: Colored overlapping smoother for graphene","title":"Example 2: Colored overlapping smoother for graphene","text":"Now we construct the error propagator of the smoother and plot its spectrum","category":"page"},{"location":"examples/example_02/#","page":"Example 2: Colored overlapping smoother for graphene","title":"Example 2: Colored overlapping smoother for graphene","text":"f_s = prod(:(I-0.5*pinv($s)*$L) for s in S)\noc_s = alfa.OperatorComposition(f_s)\nsurfacespectrum(oc_s, N=41)","category":"page"},{"location":"examples/example_02/#Spectrum-of-the-error-propagator-of-the-two-grid-method-1","page":"Example 2: Colored overlapping smoother for graphene","title":"Spectrum of the error propagator of the two-grid method","text":"","category":"section"},{"location":"examples/example_02/#","page":"Example 2: Colored overlapping smoother for graphene","title":"Example 2: Colored overlapping smoother for graphene","text":"Finally, we analyze the two-grid error propagator","category":"page"},{"location":"examples/example_02/#","page":"Example 2: Colored overlapping smoother for graphene","title":"Example 2: Colored overlapping smoother for graphene","text":"f_cgc = :(I-$P*inv($Lc)*$R*$L)\nf_tg = f_s*f_cgc*f_s\noc_tg = alfa.OperatorComposition(f_tg)\nsurfacespectrum(oc_tg, N=41)","category":"page"},{"location":"#alfa.jl-:-Automated-Local-Fourier-Analysis-1","page":"Home","title":"alfa.jl : Automated Local Fourier Analysis","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This is a julia implementation of the framework described in","category":"page"},{"location":"#","page":"Home","title":"Home","text":"[1] Kahl, K., Kintscher, N. Automated local Fourier analysis (aLFA). Bit Numer Math (2020). https://doi.org/10.1007/s10543-019-00797-w","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The main purpose of this framework is to enable the reliable and easy-to-use analysis of complex methods on repetitive structures, e.g.,  multigrid methods with complex overlapping block smoothers.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Throughout this framework we refer to definitions, theorem, lemma and algorithms of [1].","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Important remarks:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"In order to understand this framework, I recommend to read [1] completely. The explained examples in the paper can be found in the documentation of this framework.\nSome unit tests of this framework are done with randomly generated crystal operators. Sometimes for N > 2 these tests fail in case the datatype used for the lattice basis and structure elements is  T::Float64. Unfortunately this cannot be avoided when using Float64. Thus, the tests don't throw an error if 95 pass. However, For most real applications this module should still work without any internal errors. When in doubt, I recommend using T::Rational{BigInt} when possible as the implemented algorithms seem to be reliable. The downside is the slower runtime in comparison to T::Float64.","category":"page"}]
}
